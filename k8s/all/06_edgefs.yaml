apiVersion: v1
kind: Namespace
metadata:
  name: rook-edgefs-system
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: clusters.edgefs.rook.io
spec:
  group: edgefs.rook.io
  names:
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    singular: cluster
  scope: Namespaced
  version: v1beta1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: nfss.edgefs.rook.io
spec:
  group: edgefs.rook.io
  names:
    kind: NFS
    listKind: NFSList
    plural: nfss
    singular: nfs
  scope: Namespaced
  version: v1beta1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: swifts.edgefs.rook.io
spec:
  group: edgefs.rook.io
  names:
    kind: SWIFT
    listKind: SWIFTList
    plural: swifts
    singular: swift
  scope: Namespaced
  version: v1beta1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: s3s.edgefs.rook.io
spec:
  group: edgefs.rook.io
  names:
    kind: S3
    listKind: S3List
    plural: s3s
    singular: s3
  scope: Namespaced
  version: v1beta1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: s3xs.edgefs.rook.io
spec:
  group: edgefs.rook.io
  names:
    kind: S3X
    listKind: S3XList
    plural: s3xs
    singular: s3x
  scope: Namespaced
  version: v1beta1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: iscsis.edgefs.rook.io
spec:
  group: edgefs.rook.io
  names:
    kind: ISCSI
    listKind: ISCSIList
    plural: iscsis
    singular: iscsi
  scope: Namespaced
  version: v1beta1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: isgws.edgefs.rook.io
spec:
  group: edgefs.rook.io
  names:
    kind: ISGW
    listKind: ISGWList
    plural: isgws
    singular: isgw
  scope: Namespaced
  version: v1beta1
---
# The cluster role for managing all the cluster-specific resources in a namespace
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: rook-edgefs-cluster-mgmt
  labels:
    operator: rook
    storage-backend: edgefs
rules:
- apiGroups: [""]
  resources: ["secrets", "pods", "nodes", "services", "configmaps", "endpoints"]
  verbs: ["get", "list", "watch", "patch", "create", "update", "delete"]
- apiGroups: ["apps"]
  resources: ["statefulsets", "statefulsets/scale"]
  verbs: ["create", "delete", "deletecollection", "patch", "update"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
---
# The role for the operator to manage resources in the system namespace
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: rook-edgefs-system
  namespace: rook-edgefs-system
  labels:
    operator: rook
    storage-backend: edgefs
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "configmaps"]
  verbs: ["get", "list", "watch", "patch", "create", "update", "delete"]
- apiGroups: ["apps"]
  resources: ["daemonsets"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
---
# The cluster role for managing the Rook CRDs
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: rook-edgefs-global
  labels:
    operator: rook
    storage-backend: edgefs
rules:
- apiGroups: [""]
  # Pod access is needed for fencing
  # Node access is needed for determining nodes where mons should run
  resources: ["pods", "nodes", "nodes/proxy"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  # PVs and PVCs are managed by the Rook provisioner
  resources: ["events", "persistentvolumes", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "patch", "create", "update", "delete"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
- apiGroups: ["edgefs.rook.io"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["rook.io"]
  resources: ["*"]
  verbs: ["*"]
---
# The rook system service account used by the operator, agent, and discovery pods
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rook-edgefs-system
  namespace: rook-edgefs-system
  labels:
    operator: rook
    storage-backend: edgefs
---
# Grant the operator, agent, and discovery agents access to resources in its own namespace
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: rook-edgefs-system
  namespace: rook-edgefs-system
  labels:
    operator: rook
    storage-backend: edgefs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rook-edgefs-system
subjects:
- kind: ServiceAccount
  name: rook-edgefs-system
  namespace: rook-edgefs-system
---
# Grant the rook system daemons cluster-wide access to manage the Rook CRDs, PVCs, and storage classes
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: rook-edgefs-global
  namespace: rook-edgefs-system
  labels:
    operator: rook
    storage-backend: edgefs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rook-edgefs-global
subjects:
- kind: ServiceAccount
  name: rook-edgefs-system
  namespace: rook-edgefs-system
---
# The deployment for the rook operator
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rook-edgefs-operator
  namespace: rook-edgefs-system
  labels:
    operator: rook
    storage-backend: edgefs
spec:
  selector:
    matchLabels:
      app: rook-edgefs-operator
  replicas: 1
  template:
    metadata:
      labels:
        app: rook-edgefs-operator
    spec:
      serviceAccountName: rook-edgefs-system
      containers:
      - name: rook-edgefs-operator
        image: rook/edgefs:v1.0.5
        imagePullPolicy: "Always"
        args: ["edgefs", "operator"]
        env:
        - name: ROOK_LOG_LEVEL
          value: "INFO"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
---
apiVersion: v1
kind: Namespace
metadata:
  name: rook-edgefs
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rook-edgefs-cluster
  namespace: rook-edgefs
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: rook-edgefs-cluster
  namespace: rook-edgefs
rules:
- apiGroups: [""]
  resources: ["configmaps", "endpoints"]
  verbs: [ "get", "list", "watch", "create", "update", "delete" ]
- apiGroups: ["edgefs.rook.io"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: [ "get", "list" ]
- apiGroups: ["extensions"]
  resources: ["deployments/scale"]
  verbs: [ "get", "update" ]
---
# Allow the operator to create resources in this cluster's namespace
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: rook-edgefs-cluster-mgmt
  namespace: rook-edgefs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rook-edgefs-cluster-mgmt
subjects:
- kind: ServiceAccount
  name: rook-edgefs-system
  namespace: rook-edgefs-system
---
# Allow the pods in this namespace to work with configmaps
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: rook-edgefs-cluster
  namespace: rook-edgefs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rook-edgefs-cluster
subjects:
- kind: ServiceAccount
  name: rook-edgefs-cluster
  namespace: rook-edgefs
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: privileged
spec:
  fsGroup:
    rule: RunAsAny
  privileged: true
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
  - '*'
  allowedCapabilities:
  - '*'
  hostPID: true
  hostIPC: true
  hostNetwork: false
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: privileged-psp-user
rules:
- apiGroups:
  - apps
  resources:
  - podsecuritypolicies
  resourceNames:
  - privileged
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rook-edgefs-system-psp
  namespace: rook-edgefs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: privileged-psp-user
subjects:
- kind: ServiceAccount
  name: rook-edgefs-system
  namespace: rook-edgefs-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rook-edgefs-cluster-psp
  namespace: rook-edgefs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: privileged-psp-user
subjects:
- kind: ServiceAccount
  name: rook-edgefs-cluster
  namespace: rook-edgefs
---
apiVersion: edgefs.rook.io/v1beta1
kind: Cluster
metadata:
  name: rook-edgefs
  namespace: rook-edgefs
spec:
  edgefsImageName: edgefs/edgefs:1.1.8   # specify version here, i.e. edgefs/edgefs:1.1.0 etc
  serviceAccount: rook-edgefs-cluster
  dataDirHostPath: /var/lib/rook
  #dataVolumeSize: 10Gi
  # devicesResurrectMode: "restoreZap"
  #dashboard:
  #  localAddr: 10.3.30.75
  network: # cluster level networking configuration aka "host network"
   serverIfName: "enp5s0"
   brokerIfName: "enp5s0"
  #skipHostPrepare: true
  #trlogProcessingInterval: 2      # set transaction log processing interval to 2s to speed up ISGW Link delivery
  trlogKeepDays: 3                # keep up to 2 days of transaction log interval batches to reduce local storage overhead
  storage: # cluster level storage configuration and selection
    useAllNodes: true
    useAllDevices: true
    config:
  #    mdReserved: "30"            # allocate only 30% of offloaded SSD/NVMe slice for Metadata, the rest keep for BCache
  #    hddReadAhead: "2048"        # speed up reads of 2MB+ chunks of HDD (offload use case)
  #    rtVerifyChid: "0"           # may improve CPU utilization
  #    lmdbPageSize: "32768"       # larger value can improve stream operations
      useMetadataOffload: "true"   # enable use of SSD device as metadata offload
      useBCache: "true"            # enable SSD cache device and read-cache
  #    useBCacheWB: "true"         # enable SSD write-cache
      useMetadataMask: "0xff"      # all metadata on SSD
  #    rtPLevelOverride: "4"       # enable large device partitioning, only needed if automatic not working
      sync: "1"                    # highest performance, consistent on pod/software failures, not-consistent on power failures
  #    useAllSSD: "true"           # use only SSDs during deployment
      zone: "1"                    # defines failure domain's zone number for all edgefs nodes
  
  #
  #NODES MIGHT NOT WORK
  #
  #  nodes:
  #  - name: node3071ub16
  #  - name: node3072ub16
  #  - name: node3073ub16
  #  - name: node3074ub16 # node level storage configuration
  #    devices: # specific devices to use for storage can be specified for each node
  #    - name: "sdb"
  #    - name: "sdc"
  #    config: # configuration can be specified at the node level which overrides the cluster level config
  #      rtPLevelOverride: 8
  #      zone: "2"  # defines failure domain's zone number for specific node(node3074ub16)
  # nodes:
  # - name: elsweyr
  #   config:
  #     zone: 3
  # - name: blackmarsh
  #   config:
  #     zone: 4
  # - name: hammerfell
  #   config:
  #     zone: 5

  resources:
   limits:
     cpu: "2"
     memory: "4096Mi"
   requests:
     cpu: "2"
     memory: "4096Mi"
  # A key value list of annotations
  annotations:
  #  all:
  #    key: value
  #  mgr:
  #  prepare:
  #  target:
---
